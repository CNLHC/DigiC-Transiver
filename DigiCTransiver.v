
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DigiCTransiver(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO,

	//////////// HSMC, HSMC connect to DCC - High Speed ADC/DAC //////////
	input 		          		ADA_DCO,
	input 		    [13:0]		ADA_D,
	output		          		ADA_OE,
	input 		          		ADA_OR,
	output		          		ADA_SPI_CS,
	input 		          		ADB_DCO,
	input 		    [13:0]		ADB_D,
	output		          		ADB_OE,
	input 		          		ADB_OR,
	output		          		ADB_SPI_CS,
	inout 		          		AD_SCLK,
	inout 		          		AD_SDIO,
	inout 		          		AIC_BCLK,
	output		          		AIC_DIN,
	input 		          		AIC_DOUT,
	inout 		          		AIC_LRCIN,
	inout 		          		AIC_LRCOUT,
	output		          		AIC_SPI_CS,
	output		          		AIC_XCLK,
	input 		          		CLKIN1,
	output		          		CLKOUT0,
	output		    [13:0]		DA,
	output		    [13:0]		DB,
	inout 		          		FPGA_CLK_A_N,
	inout 		          		FPGA_CLK_A_P,
	inout 		          		FPGA_CLK_B_N,
	inout 		          		FPGA_CLK_B_P,
	inout 		          		J1_152,
	output		          		SCL,
	inout 		          		SDA,
	input 		          		XT_IN_N,
	input 		          		XT_IN_P
);

    wire PLL_CLK_1M,PLL_CLK_10M,PLL_CLK_20M;
    wire PLL_CLK_120M;
	 wire BareMetalPLL100M;


//=======================================================
//  REG/WIRE declarations
//=======================================================
	baremetal_pll pll0(
		.refclk(CLOCK_50),   //  refclk.clk
		.rst (~KEY[0]),      //   reset.reset
		.outclk_0(BareMetalPLL100M)  // outclk0.clk
	);

	DigiCQSys u1 (
		.qsys_clkin_clk                          (CLOCK2_50),                                 
		.spislave_0_export_0_mosi                (GPIO[0]),                
		.spislave_0_export_0_nss                 (GPIO[1]),                 
		.spislave_0_export_0_miso                (GPIO[2]),                
		.spislave_0_export_0_sclk                (GPIO[3]),              
		.pll_0_refclk_clk                        (CLOCK_50),                         
		.pll_0_outclk_1_clk                      (PLL_CLK_1M),                      
		.pll_0_outclk_10_clk                     (PLL_CLK_10M),                      
		.pll_0_outclk_20_clk                     (PLL_CLK_20M),                      
        .global_reset_reset_n                    (1),
		.pll_0_outclk_120_clk                    (PLL_CLK_120M),
        .fix_length_bytes2packets_conduit_debug_status(LEDR[0])
	);
    
    




//=======================================================
//  Structural coding
//=======================================================



endmodule

